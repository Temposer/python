#抽象类
class animel():
    def hello(self):
        print("闻闻")
class dog(animel):
    def hello(self):
        print("闻一下")
class person(animel):
    def hello(self):
        print("拥抱")
d=dog()
d.hello()
p=person()
p.hello()
#抽象方法：没有集体实现意义的方法为抽象方法
#抽象方法的主要意义时规范子类和接口
#抽象类：包含抽象方法的类叫做抽象类。
#抽象类使用：
    #抽象类可以包含抽象方法，和具体方法
    #抽象类中可以有方法，可以有方法，也可以有属性
    #抽象类不可以直接实例化
    #必须继承才可以使用，且继承来的子类，必须实现所有继承来的方法
    #假设子类没有实现所有继承来的抽象方法，则子类也不能实例化
    #抽象类的主要作用是设定类的标准，以便于开发的时候具有统一的规范
###抽象类的实现
import abc
class human(metaclass=abc.ABCMeta):
    #定义一个抽象那个方法
    @abc.abstractmethod
    def smoking(self):
        pass
    #定义类抽象方法
    @abc.abstractmethod
    def drink(self):
        pass
    #定义静态抽方法
    @abc.abstractmethod
    def play(self):
        pass
    #####作为一个抽象方法，绝对不能直接实例化
#自定义类
#类其实是
class A():
    pass
def say(self):
        print("saying thing")
A.say=say    #函数能当做变量来进行赋值
a=A()
a.say()
def name(self):
    print("{}已经来了".format(self))
name("linav")      #必须要先对函数传参
liuliu=name       #由此处可见函数名可以当做变量来使用

#不属于某个类的方法是不可以通过声明类来调用该方法的如果必须要调用如下例
from types import MethodType
class A():
    pass
def say(self):
    print("seting...")
a=A()
a.say=MethodType(say,A) #使用MethodType（需要调用的方法，对象所绑定的类）
a.say()
#help(type)
###元类
#元类的写法是固定的
#元类的命名以metaClass结尾
class lisanMetaClass(type):
    #注意写法
    def __new__(cls,name,bases,attrs):
        print("woshiy")
        attrs['id']='0000'
        attrs['add']='山东济南'
        return type.__new__(cls,name,bases,attrs)
#元类定义完就可以使用
class stu (object,metaclass=lisanMetaClass):
    pass
s=stu()
print(s.id)#woshiy   0000   由此可见元类中的print（）函数自动调用。