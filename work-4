#汉诺塔问题：
def hn(n,a,b,c):
    '''
    汉诺塔递归调用
    :param n: 盘子个数
    :param a: 代表第一个塔
    :param b: 代表第二个塔
    :param c:代表第三个塔
    :return:
    '''
    if n==1:
        print(a,"->",c)
        return None
    '''
    if n==2:
        print(a,"->",b," ",a,"->",c," ",b,"->",c)
        return None
    '''

    hn(n-1,a,c,b)#意为n-1个盘子从a塔经过c塔，移到b塔 ，##此步骤为调用函数所得，既将a看做第一个塔的实参，c看做第二个塔的实参，
                  #b看作第三个塔的实参。以此来递归调用。直到n-1 等于1即n=2时，运行n=2时的方法，然后再到退回去以n=3,为例。犹如九连环的解法。
    print(a,"->",c)
    hn(n-1,b,a,c)#与上式一样，将b看做第一个实参，a看作第二个实参，c看做第三个实参，进行递归调用。


a="A"
b="B"
c="C"
hn(1,a,b,c)
####List 列表

a=[1,2,3,4,5,6,7]
print(id(a)) #2658371667016
del a[0]            #del时python中的删除函数。
print(a)
print(id(a)) #2658371667016
#由此可见del在原本的列表中直接删除某个元素，并非再创建一个新的列表。
b=[1,2,3,4]
c=[8,9,10]
print(b+c)#[1, 2, 3, 4, 8, 9, 10]
#由此可见列表可通过“+”号相加
a=[1,2,3]
print(a*3)#[1, 2, 3, 1, 2, 3, 1, 2, 3]
#由此可见，列表可以通过“*”进行相加，即将n个相同的列表合并在一起
'''
a=[1,2,3,4]
for i in a:
    print(i)
'''
a=[1,2,3,4,5,6]
length=len(a)
xb=0
while xb<length:
    print(a[xb])
    xb+=1
a=[["one",1],["two",2],["three",3]]
for i,j in a:       #i,j的个数应该跟解包出来的变量的个数一致。
    print(i,"---",j)
a=[1,2,3,4,5,6,7]
for i in range(0,len(a)):
    print(a[i])

#列表内涵
a=[1,2,30]
#用列表a赋值给列表b
b=[i for i in a]
print(b) #[1, 2, 30]
b=[i*10 for i in a]
print(b)#[10, 20, 300]
#由此可见，使用此方法可以将列表中每一个元素分别乘以n
a=[x for x in range(1,10)]
print(a)#此种方法可以创建新列表
b=[x for x in range(0,10) if x % 2==0]
print(b)#此种方法可以在创建列表时就完成一些判断，简化步骤。
#列表也是可以嵌套的；类似于双重for循环
a=[10,20,30,40,50]
b=[100,200,300,400,500]
c=[m+n for m in b for n in a]
print(c)
d=[m+n for m in b for n in a if m+n<300]   #创建列表时用if来判断默认条件为真时。
print(d)
####列表中使用到的函数：
#len()   #列表长度
#max()   #列表中最大的元素
#min()   #列表中的最小值
#list()  #将列表中其他类型的函数（必须为可迭代的函数）装换成list类型的函数。
s ="i love you"
print(list(s))
#['i', ' ', 'l', 'o', 'v', 'e', ' ', 'y', 'o', 'u']  如式所示。
def a(n):                  #对于简单的数值，采用传值操作，对于复杂的函数，采用传地址操作。
    n[2]=200                #如第一的函数n为一个列表，此时对于整个列表的操作为传地址操作。既原来变量的地址被修改。成为独立。
    return n
def b(n):
    n=n+100                 #对于第二个变量来说，为简单的变量，为传值调用，不会产生新的变量，因此不会独立，只会在局部起作用。
    return n
l=[1,2,3,4,5,6]
print(a(l))
print(l)
m=100
print(m)
print(b(m))
print(m)
a=[i for i in range(1,6)]
print(a)
a.append(100)        #append函数为在列表的最后添加一个数。
print(a)
a.insert(2,500)           #insert(i,n)函数的作用为在列表的啊a[i]元素前面擦入一个元素n.
print(a)
lest=a.pop()          #pop()函数的作用为将列表的最后一个元素拿出来
print(lest)
print(a)
del a[0]           #del()函数的作用为删除指定位置的元素。
print(a)
a.remove(500)       #remove()   函数的作用为删除列表中指定数值的元素
print(a)             ##使用remove()  函数删除元素时，必须保证列表中必须有此函数，否则报错。
print(a)
print(id(a))
a.clear()
print(a)          #clear()  函数为清空列标的数值，但保留列表。
print(id(a))
a=[1,2,3,4,5,6,7]
a.reverse()         #reverse() 函数的作用为反转列表中函数的值。
print(a)
a=[1,2,3,4,5]
print(id(a)) #1532173418248
b=[6,7,8,9,10]
a.extend(b)
print(a)     #1532173418248   可见为传值调用。
print(id(a))
b.extend(a)    #i.extend(j)的作用为在i列表的内部插入整j列表的元素。
print(b)
a=[1,2,3,4,5,6,7]
a.append(2)
a.insert(5,2)
print(a)
num=a.count(2)    #count()函数的作用为查找列表中指定值和指定元素的个数
print(num)
a=[1,2,3,4,5,6,7]
print(a)
#在List 列表中对于简单的复制操作，为传地址操作，既赋值双方指向同一个地址一方改变，另一方也发生变化。
b=a
b[2]=30
print(b)#[1, 2, 30, 4, 5, 6, 7]
print(a)#[1, 2, 30, 4, 5, 6, 7]
a=[1,2,3,4,5,6,7]
print(a)
print(id(a))#2911047387592
b=a.copy()                   #使用copy()函数可以复制一个列表中的所有元素，然后放入另一个列表中，此列表为完全独立的id
print(b)                     #将不会受任何列表的影响。
print(id(b))#2911047367880
a=[1,2,3,4,5,6,[1,2,3]]
b=a.copy()
print(id(a))#2815698725768
print(id(b))#2815698733512
print(id(a[6]))#2815697485576
print(id(a[6]))#2815697485576
####由此可见copy()函数为掐问你拷贝，当一个列表中嵌套有其他列表时，copy只能拷贝第一层元素，第二层的元素依旧与原列表id一致。
a[6][2]=200     #由此可见a[i][j]意为，位于a[i]的二层列表中的[j]元素。
print(a)    #[1, 2, 3, 4, 5, 6, [1, 2, 200]]
print(b)     #[1, 2, 3, 4, 5, 6, [1, 2, 200]]
######元组tuple   可以看做一个不可更改的list
t=()
print(type(t))#<class 'tuple'>创建一个空元组

t=(1,)
print(type(t))#<class 'tuple'>创建一个一个元素的元组
t=(1,2,3,4,5,6,7)
print(type(t))#创建多个元素的元组
print(t)
l=[1,2,3,4,5,6]
t=tuple(l)     #使用其他结构创建元组
print(type(t))
print(t)
#元组的特性
#有序
#可访问   ，不可修改
#元组可以时任意类型
t=(1,2,3,4,5,60)
t1=t[1::2]  #下标从1开始到最后步幅为2.
print(t1)
t1=(1,2,30)
print(id(t1))#1785826392464
t2=(4,5,6,7)
t1=t1+t2
print(t1)
print(id(t1))#1785824727528      此为新元组赋值，并非修改
#元组修改为直接修改元祖中的元素
t=(1,2,3)
print(t*3)#(1, 2, 3, 1, 2, 3, 1, 2, 3)
#成员检测
t=(1,2,3)
if 2 in t:
    print("Yes")
else:
    print("No")
#双层元组的遍历
t=((1,2,3),(4,5,6),(7,8,8))
for m,n,l in t:
    print(m,"...",n,",,,",l)
